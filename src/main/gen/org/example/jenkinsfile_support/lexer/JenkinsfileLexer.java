// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/flex/JenkinsfileLexer.flex

package org.example.jenkinsfile_support.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static org.example.jenkinsfile_support.psi.JenkinsfileTypes.*;


class JenkinsfileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\12\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\35\1\42\2\35"+
    "\1\43\1\44\1\45\1\35\1\46\1\47\1\35\1\50"+
    "\1\51\1\52\1\53\5\35\1\54\1\55\1\56\1\57"+
    "\1\35\1\0\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\35\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\35\1\110\1\111\1\112\1\113"+
    "\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\0\1\4\1\1\1\5"+
    "\1\6\1\7\1\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\23\30"+
    "\1\34\1\35\1\36\1\37\1\40\1\0\1\41\1\0"+
    "\1\42\1\43\1\0\1\44\1\0\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\0\1\54\1\55\1\0"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\32\30\1\66\1\30\1\67\21\30\1\70\22\30\1\71"+
    "\1\41\1\0\1\44\2\0\1\20\1\72\1\73\1\74"+
    "\5\30\1\75\1\30\1\76\15\30\1\77\1\30\1\100"+
    "\14\30\1\101\1\102\10\30\1\103\2\30\1\104\20\30"+
    "\1\105\12\30\1\106\7\30\1\107\10\30\2\0\1\110"+
    "\13\30\1\111\7\30\1\112\3\30\1\113\1\114\22\30"+
    "\1\115\1\116\1\117\6\30\1\120\4\30\1\121\20\30"+
    "\1\122\1\123\4\30\1\124\5\30\1\125\3\30\2\0"+
    "\2\30\1\126\1\127\1\30\1\130\3\30\1\131\1\132"+
    "\1\133\3\30\1\134\12\30\1\135\1\30\1\136\1\137"+
    "\2\30\1\140\3\30\1\141\17\30\1\142\3\30\1\143"+
    "\1\30\1\144\1\145\1\30\1\146\2\30\1\147\1\30"+
    "\1\150\1\30\1\151\6\30\1\152\2\30\1\153\1\154"+
    "\2\30\1\155\2\30\1\156\3\30\1\157\4\30\1\160"+
    "\1\30\1\161\6\30\1\162\4\30\1\163\12\30\1\164"+
    "\3\30\1\165\1\166\2\30\1\167\1\170\1\171\1\30"+
    "\1\172\12\30\1\173\5\30\1\174\3\30\1\175\1\30"+
    "\1\176\4\30\1\177\1\200\1\30\1\201\4\30\1\202"+
    "\1\203\1\204\4\30\1\205\1\30\1\206\7\30\1\207"+
    "\1\210\2\30\1\211\6\30\1\212\6\30\1\213\1\214"+
    "\11\30\1\215\1\30\1\216\1\217\4\30\1\220\4\30"+
    "\1\221\1\222\1\30\1\223\10\30\1\224\1\225\1\226"+
    "\6\30\1\227\3\30\1\230\10\30\1\231\1\30\1\232"+
    "\4\30\1\233\1\30\1\234\1\235\1\236\1\237\1\240"+
    "\1\241\1\242\2\30\1\243\1\244\1\245\6\30\1\246"+
    "\1\30\1\247\1\250\6\30\1\251\3\30\1\252\3\30"+
    "\1\253\15\30\1\254\1\255\2\30\1\256\1\30\1\257"+
    "\1\260";

  private static int [] zzUnpackAction() {
    int [] result = new int[673];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\114\0\344\0\u0130\0\u017c\0\114"+
    "\0\u01c8\0\u0214\0\u0260\0\114\0\114\0\u02ac\0\u02f8\0\114"+
    "\0\u0344\0\u0390\0\u03dc\0\u0428\0\114\0\114\0\u0474\0\u04c0"+
    "\0\u050c\0\u0558\0\114\0\u05a4\0\114\0\114\0\114\0\u05f0"+
    "\0\u063c\0\u0688\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850"+
    "\0\u089c\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0"+
    "\0\u0afc\0\u0b48\0\114\0\u0b94\0\114\0\114\0\114\0\u0be0"+
    "\0\u0c2c\0\u0c78\0\114\0\114\0\u0cc4\0\u0d10\0\u0d5c\0\114"+
    "\0\114\0\114\0\114\0\114\0\114\0\114\0\u0da8\0\u0df4"+
    "\0\114\0\u0e40\0\114\0\u0e8c\0\u0ed8\0\114\0\114\0\u0f24"+
    "\0\114\0\114\0\u0f70\0\u0fbc\0\u1008\0\u1054\0\u10a0\0\u10ec"+
    "\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4\0\u1300\0\u134c"+
    "\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560\0\u15ac"+
    "\0\u15f8\0\u1644\0\u1690\0\u16dc\0\u05a4\0\u1728\0\u1774\0\u17c0"+
    "\0\u180c\0\u1858\0\u18a4\0\u18f0\0\u193c\0\u1988\0\u19d4\0\u1a20"+
    "\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c\0\u1be8\0\u1c34\0\u1c80"+
    "\0\u05a4\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94"+
    "\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u205c\0\u20a8\0\u20f4"+
    "\0\u2140\0\u218c\0\u21d8\0\114\0\114\0\u2224\0\114\0\u2270"+
    "\0\u22bc\0\u0e40\0\114\0\114\0\114\0\u2308\0\u2354\0\u23a0"+
    "\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u05a4\0\u251c\0\u2568\0\u25b4"+
    "\0\u2600\0\u264c\0\u2698\0\u26e4\0\u2730\0\u277c\0\u27c8\0\u2814"+
    "\0\u2860\0\u28ac\0\u28f8\0\u2944\0\u05a4\0\u2990\0\u29dc\0\u2a28"+
    "\0\u2a74\0\u2ac0\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88"+
    "\0\u2cd4\0\u05a4\0\u05a4\0\u2d20\0\u2d6c\0\u2db8\0\u2e04\0\u2e50"+
    "\0\u2e9c\0\u2ee8\0\u2f34\0\u05a4\0\u2f80\0\u2fcc\0\u05a4\0\u3018"+
    "\0\u3064\0\u30b0\0\u30fc\0\u3148\0\u3194\0\u31e0\0\u322c\0\u3278"+
    "\0\u32c4\0\u3310\0\u335c\0\u33a8\0\u33f4\0\u3440\0\u348c\0\u05a4"+
    "\0\u34d8\0\u3524\0\u3570\0\u35bc\0\u3608\0\u3654\0\u36a0\0\u36ec"+
    "\0\u3738\0\u3784\0\u05a4\0\u37d0\0\u381c\0\u3868\0\u38b4\0\u3900"+
    "\0\u394c\0\u3998\0\u05a4\0\u39e4\0\u3a30\0\u3a7c\0\u3ac8\0\u3b14"+
    "\0\u3b60\0\u3bac\0\u3bf8\0\u3c44\0\u3c90\0\114\0\u3cdc\0\u3d28"+
    "\0\u3d74\0\u3dc0\0\u3e0c\0\u3e58\0\u3ea4\0\u3ef0\0\u3f3c\0\u3f88"+
    "\0\u3fd4\0\u05a4\0\u4020\0\u406c\0\u40b8\0\u4104\0\u4150\0\u419c"+
    "\0\u41e8\0\u05a4\0\u4234\0\u4280\0\u42cc\0\u05a4\0\u05a4\0\u4318"+
    "\0\u4364\0\u43b0\0\u43fc\0\u4448\0\u4494\0\u44e0\0\u452c\0\u4578"+
    "\0\u45c4\0\u4610\0\u465c\0\u46a8\0\u46f4\0\u4740\0\u478c\0\u47d8"+
    "\0\u4824\0\u05a4\0\u05a4\0\u05a4\0\u4870\0\u48bc\0\u4908\0\u4954"+
    "\0\u49a0\0\u49ec\0\u05a4\0\u4a38\0\u4a84\0\u4ad0\0\u4b1c\0\u05a4"+
    "\0\u4b68\0\u4bb4\0\u4c00\0\u4c4c\0\u4c98\0\u4ce4\0\u4d30\0\u4d7c"+
    "\0\u4dc8\0\u4e14\0\u4e60\0\u4eac\0\u4ef8\0\u4f44\0\u4f90\0\u4fdc"+
    "\0\u05a4\0\u05a4\0\u5028\0\u5074\0\u50c0\0\u510c\0\u05a4\0\u5158"+
    "\0\u51a4\0\u51f0\0\u523c\0\u5288\0\u05a4\0\u52d4\0\u5320\0\u536c"+
    "\0\u53b8\0\u5404\0\u5450\0\u549c\0\u05a4\0\u05a4\0\u54e8\0\u05a4"+
    "\0\u5534\0\u5580\0\u55cc\0\u05a4\0\u5618\0\u05a4\0\u5664\0\u56b0"+
    "\0\u56fc\0\u05a4\0\u5748\0\u5794\0\u57e0\0\u582c\0\u5878\0\u58c4"+
    "\0\u5910\0\u595c\0\u59a8\0\u59f4\0\u05a4\0\u5a40\0\u5a8c\0\u05a4"+
    "\0\u5ad8\0\u5b24\0\u05a4\0\u5b70\0\u5bbc\0\u5c08\0\u05a4\0\u5c54"+
    "\0\u5ca0\0\u5cec\0\u5d38\0\u5d84\0\u5dd0\0\u5e1c\0\u5e68\0\u5eb4"+
    "\0\u5f00\0\u5f4c\0\u5f98\0\u5fe4\0\u6030\0\u607c\0\u05a4\0\u60c8"+
    "\0\u6114\0\u6160\0\u05a4\0\u61ac\0\u61f8\0\u05a4\0\u6244\0\u05a4"+
    "\0\u6290\0\u62dc\0\u05a4\0\u6328\0\u05a4\0\u6374\0\u05a4\0\u63c0"+
    "\0\u640c\0\u6458\0\u64a4\0\u64f0\0\u653c\0\u05a4\0\u6588\0\u65d4"+
    "\0\114\0\114\0\u6620\0\u666c\0\u05a4\0\u66b8\0\u6704\0\u05a4"+
    "\0\u6750\0\u679c\0\u67e8\0\u05a4\0\u6834\0\u6880\0\u68cc\0\u6918"+
    "\0\u6964\0\u69b0\0\u05a4\0\u69fc\0\u6a48\0\u6a94\0\u6ae0\0\u6b2c"+
    "\0\u6b78\0\u05a4\0\u6bc4\0\u6c10\0\u6c5c\0\u6ca8\0\u05a4\0\u6cf4"+
    "\0\u6d40\0\u6d8c\0\u6dd8\0\u6e24\0\u6e70\0\u6ebc\0\u6f08\0\u6f54"+
    "\0\u6fa0\0\u05a4\0\u6fec\0\u7038\0\u7084\0\u05a4\0\u05a4\0\u70d0"+
    "\0\u711c\0\u05a4\0\u05a4\0\u05a4\0\u7168\0\u05a4\0\u71b4\0\u7200"+
    "\0\u724c\0\u7298\0\u72e4\0\u7330\0\u737c\0\u73c8\0\u7414\0\u7460"+
    "\0\u05a4\0\u74ac\0\u74f8\0\u7544\0\u7590\0\u75dc\0\u05a4\0\u7628"+
    "\0\u7674\0\u76c0\0\u05a4\0\u770c\0\u05a4\0\u7758\0\u77a4\0\u77f0"+
    "\0\u783c\0\u05a4\0\u05a4\0\u7888\0\u05a4\0\u78d4\0\u7920\0\u796c"+
    "\0\u79b8\0\u05a4\0\u05a4\0\u05a4\0\u7a04\0\u7a50\0\u7a9c\0\u7ae8"+
    "\0\u05a4\0\u7b34\0\u05a4\0\u7b80\0\u7bcc\0\u7c18\0\u7c64\0\u7cb0"+
    "\0\u7cfc\0\u7d48\0\u05a4\0\u05a4\0\u7d94\0\u7de0\0\u05a4\0\u7e2c"+
    "\0\u7e78\0\u7ec4\0\u7f10\0\u7f5c\0\u7fa8\0\u05a4\0\u7ff4\0\u8040"+
    "\0\u808c\0\u80d8\0\u8124\0\u8170\0\u05a4\0\u05a4\0\u81bc\0\u8208"+
    "\0\u8254\0\u82a0\0\u82ec\0\u8338\0\u8384\0\u83d0\0\u841c\0\u05a4"+
    "\0\u8468\0\u05a4\0\u05a4\0\u84b4\0\u8500\0\u854c\0\u8598\0\u05a4"+
    "\0\u85e4\0\u8630\0\u867c\0\u86c8\0\u05a4\0\u05a4\0\u8714\0\u05a4"+
    "\0\u8760\0\u87ac\0\u87f8\0\u8844\0\u8890\0\u88dc\0\u8928\0\u8974"+
    "\0\u05a4\0\u05a4\0\u05a4\0\u89c0\0\u8a0c\0\u8a58\0\u8aa4\0\u8af0"+
    "\0\u8b3c\0\u05a4\0\u8b88\0\u8bd4\0\u8c20\0\u05a4\0\u8c6c\0\u8cb8"+
    "\0\u8d04\0\u8d50\0\u8d9c\0\u8de8\0\u8e34\0\u8e80\0\u05a4\0\u8ecc"+
    "\0\u05a4\0\u8f18\0\u8f64\0\u8fb0\0\u8ffc\0\u05a4\0\u9048\0\u05a4"+
    "\0\u05a4\0\u05a4\0\u05a4\0\u05a4\0\u05a4\0\u05a4\0\u9094\0\u90e0"+
    "\0\u05a4\0\u05a4\0\u05a4\0\u912c\0\u9178\0\u91c4\0\u9210\0\u925c"+
    "\0\u92a8\0\u05a4\0\u92f4\0\u05a4\0\u05a4\0\u9340\0\u938c\0\u93d8"+
    "\0\u9424\0\u9470\0\u94bc\0\u05a4\0\u9508\0\u9554\0\u95a0\0\u05a4"+
    "\0\u95ec\0\u9638\0\u9684\0\u05a4\0\u96d0\0\u971c\0\u9768\0\u97b4"+
    "\0\u9800\0\u984c\0\u9898\0\u98e4\0\u9930\0\u997c\0\u99c8\0\u9a14"+
    "\0\u9a60\0\u05a4\0\u05a4\0\u9aac\0\u9af8\0\u05a4\0\u9b44\0\u05a4"+
    "\0\u05a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[673];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\20\34\1\35\1\2\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\34\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\34\1\56\1\57\1\60\1\61\1\34\1\62\2\34"+
    "\1\63\1\64\1\65\1\66\115\0\1\3\2\0\1\3"+
    "\111\0\1\4\141\0\1\67\63\0\2\70\1\0\2\70"+
    "\1\0\1\70\1\71\45\70\1\72\36\70\30\0\1\73"+
    "\75\0\1\74\101\0\2\75\1\0\2\75\1\0\5\75"+
    "\1\76\41\75\1\77\36\75\16\0\1\100\3\0\1\101"+
    "\5\0\1\102\113\0\1\103\113\0\1\104\1\105\104\0"+
    "\1\106\107\0\1\107\4\0\1\110\4\0\1\111\105\0"+
    "\1\112\1\0\1\24\116\0\1\113\1\114\113\0\1\115"+
    "\62\0\1\116\30\0\1\117\1\120\104\0\1\121\2\0"+
    "\1\122\112\0\1\34\7\0\20\34\4\0\30\34\30\0"+
    "\1\34\7\0\20\34\4\0\1\34\1\123\4\34\1\124"+
    "\3\34\1\125\1\34\1\126\3\34\1\127\7\34\30\0"+
    "\1\34\7\0\20\34\4\0\1\130\14\34\1\131\2\34"+
    "\1\132\2\34\1\133\4\34\30\0\1\34\7\0\20\34"+
    "\4\0\1\134\6\34\1\135\2\34\1\136\2\34\1\137"+
    "\2\34\1\140\7\34\30\0\1\34\7\0\20\34\4\0"+
    "\4\34\1\141\3\34\1\142\4\34\1\143\12\34\30\0"+
    "\1\34\7\0\20\34\4\0\2\34\1\144\7\34\1\145"+
    "\1\34\1\146\2\34\1\147\6\34\1\150\1\34\30\0"+
    "\1\34\7\0\20\34\4\0\1\151\7\34\1\152\4\34"+
    "\1\153\12\34\30\0\1\34\7\0\20\34\4\0\10\34"+
    "\1\154\17\34\30\0\1\34\7\0\20\34\4\0\5\34"+
    "\1\155\5\34\1\156\1\157\13\34\30\0\1\34\7\0"+
    "\20\34\4\0\23\34\1\160\4\34\30\0\1\34\7\0"+
    "\20\34\4\0\1\161\7\34\1\162\17\34\30\0\1\34"+
    "\7\0\20\34\4\0\1\163\27\34\30\0\1\34\7\0"+
    "\20\34\4\0\4\34\1\164\10\34\1\165\5\34\1\166"+
    "\4\34\30\0\1\34\7\0\20\34\4\0\16\34\1\167"+
    "\11\34\30\0\1\34\7\0\20\34\4\0\1\170\7\34"+
    "\1\171\4\34\1\172\2\34\1\173\2\34\1\174\1\34"+
    "\1\175\2\34\30\0\1\34\7\0\20\34\4\0\4\34"+
    "\1\176\23\34\30\0\1\34\7\0\20\34\4\0\2\34"+
    "\1\177\1\34\1\200\2\34\1\201\2\34\1\202\6\34"+
    "\1\203\1\204\1\205\1\34\1\206\2\34\30\0\1\34"+
    "\7\0\20\34\4\0\1\207\3\34\1\210\2\34\1\211"+
    "\1\212\4\34\1\213\2\34\1\214\7\34\30\0\1\34"+
    "\7\0\20\34\4\0\14\34\1\215\1\34\1\216\2\34"+
    "\1\217\6\34\30\0\1\34\7\0\20\34\4\0\1\220"+
    "\6\34\1\221\1\222\7\34\1\223\7\34\115\0\1\224"+
    "\2\0\2\70\1\0\2\70\1\0\1\70\1\225\45\70"+
    "\1\72\36\70\7\0\1\226\104\0\2\70\4\0\106\70"+
    "\2\75\1\0\2\75\1\0\5\75\1\227\41\75\1\77"+
    "\36\75\13\0\1\230\100\0\2\75\4\0\106\75\16\107"+
    "\1\231\75\107\2\110\1\0\2\110\1\0\106\110\24\0"+
    "\1\232\120\0\1\233\175\0\1\234\31\0\1\235\106\0"+
    "\1\34\7\0\20\34\4\0\15\34\1\236\3\34\1\237"+
    "\6\34\30\0\1\34\7\0\20\34\4\0\4\34\1\240"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\12\34\1\241"+
    "\12\34\1\242\2\34\30\0\1\34\7\0\20\34\4\0"+
    "\27\34\1\243\30\0\1\34\7\0\20\34\4\0\2\34"+
    "\1\244\25\34\30\0\1\34\7\0\20\34\4\0\22\34"+
    "\1\245\5\34\30\0\1\34\7\0\20\34\4\0\15\34"+
    "\1\246\12\34\30\0\1\34\7\0\20\34\4\0\1\247"+
    "\3\34\1\250\23\34\30\0\1\34\7\0\20\34\4\0"+
    "\10\34\1\251\17\34\30\0\1\34\7\0\20\34\4\0"+
    "\21\34\1\252\1\253\5\34\30\0\1\34\7\0\20\34"+
    "\4\0\1\254\3\34\1\255\10\34\1\256\12\34\30\0"+
    "\1\34\7\0\20\34\4\0\1\257\3\34\1\260\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\14\34\1\261\13\34"+
    "\30\0\1\34\7\0\20\34\4\0\15\34\1\262\12\34"+
    "\30\0\1\34\7\0\20\34\4\0\5\34\1\263\4\34"+
    "\1\264\15\34\30\0\1\34\7\0\20\34\4\0\20\34"+
    "\1\265\7\34\30\0\1\34\7\0\20\34\4\0\2\34"+
    "\1\266\25\34\30\0\1\34\7\0\20\34\4\0\7\34"+
    "\1\267\20\34\30\0\1\34\7\0\20\34\4\0\21\34"+
    "\1\270\6\34\30\0\1\34\7\0\20\34\4\0\24\34"+
    "\1\271\3\34\30\0\1\34\7\0\20\34\4\0\23\34"+
    "\1\272\4\34\30\0\1\34\7\0\20\34\4\0\16\34"+
    "\1\273\3\34\1\274\5\34\30\0\1\34\7\0\20\34"+
    "\4\0\10\34\1\275\1\34\1\276\15\34\30\0\1\34"+
    "\7\0\20\34\4\0\12\34\1\277\1\34\1\300\11\34"+
    "\1\301\1\34\30\0\1\34\7\0\20\34\4\0\20\34"+
    "\1\302\7\34\30\0\1\34\7\0\20\34\4\0\22\34"+
    "\1\303\5\34\30\0\1\34\7\0\20\34\4\0\16\34"+
    "\1\304\11\34\30\0\1\34\7\0\20\34\4\0\16\34"+
    "\1\305\2\34\1\306\1\307\5\34\30\0\1\34\7\0"+
    "\20\34\4\0\1\34\1\310\26\34\30\0\1\34\7\0"+
    "\20\34\4\0\1\34\1\311\26\34\30\0\1\34\7\0"+
    "\20\34\4\0\1\34\1\312\26\34\30\0\1\34\7\0"+
    "\20\34\4\0\22\34\1\313\5\34\30\0\1\34\7\0"+
    "\20\34\4\0\25\34\1\314\2\34\30\0\1\34\7\0"+
    "\20\34\4\0\3\34\1\315\10\34\1\316\5\34\1\317"+
    "\5\34\30\0\1\34\7\0\20\34\4\0\12\34\1\320"+
    "\15\34\30\0\1\34\7\0\20\34\4\0\22\34\1\321"+
    "\5\34\30\0\1\34\7\0\20\34\4\0\2\34\1\322"+
    "\15\34\1\323\1\324\6\34\30\0\1\34\7\0\20\34"+
    "\4\0\16\34\1\325\11\34\30\0\1\34\7\0\20\34"+
    "\4\0\12\34\1\326\6\34\1\327\3\34\1\330\2\34"+
    "\30\0\1\34\7\0\20\34\4\0\10\34\1\331\4\34"+
    "\1\332\12\34\30\0\1\34\7\0\20\34\4\0\1\34"+
    "\1\333\26\34\30\0\1\34\7\0\20\34\4\0\21\34"+
    "\1\334\6\34\30\0\1\34\7\0\20\34\4\0\1\335"+
    "\5\34\1\336\13\34\1\337\5\34\30\0\1\34\7\0"+
    "\20\34\4\0\13\34\1\340\4\34\1\341\7\34\30\0"+
    "\1\34\7\0\20\34\4\0\2\34\1\342\25\34\30\0"+
    "\1\34\7\0\20\34\4\0\4\34\1\343\23\34\30\0"+
    "\1\34\7\0\20\34\4\0\7\34\1\344\20\34\30\0"+
    "\1\34\7\0\20\34\4\0\1\345\3\34\1\346\13\34"+
    "\1\347\7\34\30\0\1\34\7\0\20\34\4\0\2\34"+
    "\1\350\13\34\1\351\11\34\30\0\1\34\7\0\20\34"+
    "\4\0\10\34\1\352\17\34\30\0\1\34\7\0\20\34"+
    "\4\0\6\34\1\353\21\34\30\0\1\34\7\0\20\34"+
    "\4\0\26\34\1\354\1\34\30\0\1\34\7\0\20\34"+
    "\4\0\10\34\1\355\7\34\1\356\7\34\30\0\1\34"+
    "\7\0\20\34\4\0\13\34\1\357\14\34\30\0\1\34"+
    "\7\0\20\34\4\0\15\34\1\360\12\34\30\0\1\34"+
    "\7\0\20\34\4\0\10\34\1\361\12\34\1\362\3\34"+
    "\1\363\30\0\1\34\7\0\20\34\4\0\21\34\1\364"+
    "\6\34\30\0\1\34\7\0\20\34\4\0\21\34\1\365"+
    "\6\34\30\0\1\34\7\0\20\34\4\0\4\34\1\366"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\10\34\1\367"+
    "\17\34\30\0\1\34\7\0\20\34\4\0\4\34\1\370"+
    "\3\34\1\371\17\34\30\0\1\34\7\0\20\34\4\0"+
    "\22\34\1\372\5\34\30\0\1\34\7\0\20\34\4\0"+
    "\10\34\1\373\17\34\4\0\7\226\1\374\104\226\13\230"+
    "\1\375\100\230\23\107\1\376\70\107\24\0\1\34\7\0"+
    "\20\34\4\0\20\34\1\377\7\34\30\0\1\34\7\0"+
    "\20\34\4\0\22\34\1\u0100\5\34\30\0\1\34\7\0"+
    "\20\34\4\0\14\34\1\u0101\13\34\30\0\1\34\7\0"+
    "\12\34\1\u0102\5\34\4\0\30\34\30\0\1\34\7\0"+
    "\20\34\4\0\1\u0103\27\34\30\0\1\34\7\0\12\34"+
    "\1\u0104\5\34\4\0\30\34\30\0\1\34\7\0\20\34"+
    "\4\0\7\34\1\u0105\20\34\30\0\1\34\7\0\20\34"+
    "\4\0\12\34\1\u0106\15\34\30\0\1\34\7\0\20\34"+
    "\4\0\14\34\1\u0107\13\34\30\0\1\34\7\0\20\34"+
    "\4\0\1\u0108\27\34\30\0\1\34\7\0\20\34\4\0"+
    "\12\34\1\u0109\15\34\30\0\1\34\7\0\20\34\4\0"+
    "\4\34\1\u010a\23\34\30\0\1\34\7\0\20\34\4\0"+
    "\2\34\1\u010b\25\34\30\0\1\34\7\0\20\34\4\0"+
    "\14\34\1\u010c\13\34\30\0\1\34\7\0\20\34\4\0"+
    "\2\34\1\u010d\25\34\30\0\1\34\7\0\20\34\4\0"+
    "\10\34\1\u010e\17\34\30\0\1\34\7\0\20\34\4\0"+
    "\21\34\1\u010f\6\34\30\0\1\34\7\0\20\34\4\0"+
    "\1\u0110\27\34\30\0\1\34\7\0\20\34\4\0\22\34"+
    "\1\u0111\5\34\30\0\1\34\7\0\20\34\4\0\14\34"+
    "\1\u0112\13\34\30\0\1\34\7\0\20\34\4\0\1\u0113"+
    "\27\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u0114"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\11\34\1\u0115"+
    "\16\34\30\0\1\34\7\0\20\34\4\0\15\34\1\u0116"+
    "\12\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u0117"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\10\34\1\u0118"+
    "\17\34\30\0\1\34\7\0\20\34\4\0\1\u0119\27\34"+
    "\30\0\1\34\7\0\20\34\4\0\20\34\1\u011a\7\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u011b\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\12\34\1\u011c\15\34"+
    "\30\0\1\34\7\0\20\34\4\0\21\34\1\u011d\6\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u011e\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\1\u011f\27\34\30\0"+
    "\1\34\7\0\20\34\4\0\4\34\1\u0120\23\34\30\0"+
    "\1\34\7\0\20\34\4\0\12\34\1\u0121\2\34\1\u0122"+
    "\12\34\30\0\1\34\7\0\20\34\4\0\23\34\1\u0123"+
    "\4\34\30\0\1\34\7\0\20\34\4\0\22\34\1\u0124"+
    "\5\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u0125"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u0126"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u0127"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\20\34\1\u0128"+
    "\7\34\30\0\1\34\7\0\20\34\4\0\20\34\1\u0129"+
    "\7\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u012a"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u012b"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\12\34\1\u012c"+
    "\15\34\30\0\1\34\7\0\20\34\4\0\10\34\1\u012d"+
    "\17\34\30\0\1\34\7\0\20\34\4\0\11\34\1\u012e"+
    "\16\34\30\0\1\34\7\0\20\34\4\0\1\u012f\27\34"+
    "\30\0\1\34\7\0\20\34\4\0\21\34\1\u0130\6\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u0131\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\12\34\1\u0132\15\34"+
    "\30\0\1\34\7\0\20\34\4\0\22\34\1\u0133\5\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u0134\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\24\34\1\u0135\3\34"+
    "\30\0\1\34\7\0\20\34\4\0\22\34\1\u0136\5\34"+
    "\30\0\1\34\7\0\20\34\4\0\12\34\1\u0137\15\34"+
    "\30\0\1\34\7\0\20\34\4\0\7\34\1\u0138\20\34"+
    "\30\0\1\34\7\0\20\34\4\0\3\34\1\u0139\24\34"+
    "\30\0\1\34\7\0\20\34\4\0\20\34\1\u013a\7\34"+
    "\30\0\1\34\7\0\20\34\4\0\20\34\1\u013b\2\34"+
    "\1\u013c\4\34\30\0\1\34\7\0\20\34\4\0\10\34"+
    "\1\u013d\17\34\30\0\1\34\7\0\20\34\4\0\20\34"+
    "\1\u013e\7\34\30\0\1\34\7\0\20\34\4\0\4\34"+
    "\1\u013f\23\34\30\0\1\34\7\0\17\34\1\u0140\4\0"+
    "\30\34\30\0\1\34\7\0\20\34\4\0\6\34\1\u0141"+
    "\12\34\1\u0142\1\u0143\5\34\30\0\1\34\7\0\20\34"+
    "\4\0\16\34\1\u0144\11\34\30\0\1\34\7\0\20\34"+
    "\4\0\10\34\1\u0145\17\34\30\0\1\34\7\0\20\34"+
    "\4\0\2\34\1\u0146\25\34\30\0\1\34\7\0\20\34"+
    "\4\0\4\34\1\u0147\23\34\30\0\1\34\7\0\20\34"+
    "\4\0\22\34\1\u0148\5\34\30\0\1\34\7\0\20\34"+
    "\4\0\22\34\1\u0149\5\34\30\0\1\34\7\0\20\34"+
    "\4\0\21\34\1\u014a\6\34\30\0\1\34\7\0\20\34"+
    "\4\0\15\34\1\u014b\12\34\30\0\1\34\7\0\20\34"+
    "\4\0\4\34\1\u014c\23\34\30\0\1\34\7\0\20\34"+
    "\4\0\12\34\1\u014d\15\34\30\0\1\34\7\0\20\34"+
    "\4\0\6\34\1\u014e\21\34\30\0\1\34\7\0\20\34"+
    "\4\0\4\34\1\u014f\23\34\30\0\1\34\7\0\20\34"+
    "\4\0\22\34\1\u0150\1\u0151\4\34\30\0\1\34\7\0"+
    "\20\34\4\0\22\34\1\u0152\5\34\30\0\1\34\7\0"+
    "\20\34\4\0\20\34\1\u0153\7\34\30\0\1\34\7\0"+
    "\20\34\4\0\22\34\1\u0154\5\34\30\0\1\34\7\0"+
    "\20\34\4\0\14\34\1\u0155\13\34\30\0\1\34\7\0"+
    "\20\34\4\0\12\34\1\u0156\15\34\30\0\1\34\7\0"+
    "\20\34\4\0\7\34\1\u0157\20\34\30\0\1\34\7\0"+
    "\20\34\4\0\22\34\1\u0158\5\34\4\0\7\226\1\u0159"+
    "\104\226\13\230\1\u015a\100\230\24\0\1\34\7\0\20\34"+
    "\4\0\22\34\1\u015b\5\34\30\0\1\34\7\0\20\34"+
    "\4\0\20\34\1\u015c\7\34\30\0\1\34\7\0\20\34"+
    "\4\0\22\34\1\u015d\5\34\30\0\1\34\7\0\20\34"+
    "\4\0\5\34\1\u015e\22\34\30\0\1\34\7\0\20\34"+
    "\4\0\27\34\1\u015f\30\0\1\34\7\0\20\34\4\0"+
    "\5\34\1\u0160\22\34\30\0\1\34\7\0\20\34\4\0"+
    "\10\34\1\u0161\17\34\30\0\1\34\7\0\20\34\4\0"+
    "\4\34\1\u0162\23\34\30\0\1\34\7\0\20\34\4\0"+
    "\2\34\1\u0163\25\34\30\0\1\34\7\0\20\34\4\0"+
    "\11\34\1\u0164\16\34\30\0\1\34\7\0\20\34\4\0"+
    "\3\34\1\u0165\24\34\30\0\1\34\7\0\20\34\4\0"+
    "\7\34\1\u0166\20\34\30\0\1\34\7\0\20\34\4\0"+
    "\6\34\1\u0167\21\34\30\0\1\34\7\0\20\34\4\0"+
    "\11\34\1\u0168\16\34\30\0\1\34\7\0\20\34\4\0"+
    "\2\34\1\u0169\25\34\30\0\1\34\7\0\20\34\4\0"+
    "\21\34\1\u016a\6\34\30\0\1\34\7\0\20\34\4\0"+
    "\14\34\1\u016b\13\34\30\0\1\34\7\0\20\34\4\0"+
    "\10\34\1\u016c\17\34\30\0\1\34\7\0\20\34\4\0"+
    "\23\34\1\u016d\4\34\30\0\1\34\7\0\20\34\4\0"+
    "\22\34\1\u016e\5\34\30\0\1\34\7\0\20\34\4\0"+
    "\4\34\1\u016f\23\34\30\0\1\34\7\0\20\34\4\0"+
    "\20\34\1\u0170\7\34\30\0\1\34\7\0\20\34\4\0"+
    "\12\34\1\u0171\15\34\30\0\1\34\7\0\20\34\4\0"+
    "\4\34\1\u0172\23\34\30\0\1\34\7\0\20\34\4\0"+
    "\14\34\1\u0173\13\34\30\0\1\34\7\0\20\34\4\0"+
    "\23\34\1\u0174\4\34\30\0\1\34\7\0\20\34\4\0"+
    "\4\34\1\u0175\23\34\30\0\1\34\7\0\4\34\1\u0176"+
    "\13\34\4\0\30\34\30\0\1\34\7\0\20\34\4\0"+
    "\12\34\1\u0177\15\34\30\0\1\34\7\0\20\34\4\0"+
    "\3\34\1\u0178\24\34\30\0\1\34\7\0\20\34\4\0"+
    "\4\34\1\u0179\23\34\30\0\1\34\7\0\20\34\4\0"+
    "\20\34\1\u017a\7\34\30\0\1\34\7\0\20\34\4\0"+
    "\22\34\1\u017b\5\34\30\0\1\34\7\0\20\34\4\0"+
    "\1\u017c\27\34\30\0\1\34\7\0\20\34\4\0\20\34"+
    "\1\u017d\7\34\30\0\1\34\7\0\20\34\4\0\20\34"+
    "\1\u017e\7\34\30\0\1\34\7\0\20\34\4\0\12\34"+
    "\1\u017f\15\34\30\0\1\34\7\0\20\34\4\0\1\u0180"+
    "\27\34\30\0\1\34\7\0\20\34\4\0\10\34\1\u0181"+
    "\17\34\30\0\1\34\7\0\20\34\4\0\15\34\1\u0182"+
    "\12\34\30\0\1\34\7\0\20\34\4\0\1\u0183\27\34"+
    "\30\0\1\34\7\0\20\34\4\0\12\34\1\u0184\1\u0185"+
    "\14\34\30\0\1\34\7\0\20\34\4\0\25\34\1\u0186"+
    "\2\34\30\0\1\34\7\0\20\34\4\0\12\34\1\u0187"+
    "\15\34\30\0\1\34\7\0\15\34\1\u0188\2\34\4\0"+
    "\30\34\30\0\1\34\7\0\20\34\4\0\20\34\1\u0189"+
    "\7\34\30\0\1\34\7\0\20\34\4\0\1\u018a\27\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u018b\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\10\34\1\u018c\17\34"+
    "\30\0\1\34\7\0\5\34\1\u018d\12\34\4\0\30\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u018e\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\27\34\1\u018f\30\0"+
    "\1\34\7\0\20\34\4\0\20\34\1\u0190\7\34\30\0"+
    "\1\34\7\0\20\34\4\0\16\34\1\u0191\11\34\30\0"+
    "\1\34\7\0\20\34\4\0\4\34\1\u0192\23\34\30\0"+
    "\1\34\7\0\20\34\4\0\16\34\1\u0193\11\34\30\0"+
    "\1\34\7\0\20\34\4\0\21\34\1\u0194\6\34\30\0"+
    "\1\34\7\0\20\34\4\0\4\34\1\u0195\23\34\30\0"+
    "\1\34\7\0\20\34\4\0\7\34\1\u0196\20\34\30\0"+
    "\1\34\7\0\20\34\4\0\10\34\1\u0197\17\34\30\0"+
    "\1\34\7\0\20\34\4\0\21\34\1\u0198\6\34\30\0"+
    "\1\34\7\0\20\34\4\0\14\34\1\u0199\13\34\30\0"+
    "\1\34\7\0\20\34\4\0\4\34\1\u019a\23\34\30\0"+
    "\1\34\7\0\20\34\4\0\20\34\1\u019b\7\34\30\0"+
    "\1\34\7\0\20\34\4\0\2\34\1\u019c\25\34\30\0"+
    "\1\34\7\0\20\34\4\0\25\34\1\u019d\2\34\30\0"+
    "\1\34\7\0\20\34\4\0\15\34\1\u019e\12\34\30\0"+
    "\1\34\7\0\20\34\4\0\21\34\1\u019f\6\34\30\0"+
    "\1\34\7\0\20\34\4\0\6\34\1\u01a0\21\34\30\0"+
    "\1\34\7\0\20\34\4\0\1\u01a1\27\34\30\0\1\34"+
    "\7\0\20\34\4\0\2\34\1\u01a2\25\34\30\0\1\34"+
    "\7\0\20\34\4\0\20\34\1\u01a3\7\34\30\0\1\34"+
    "\7\0\20\34\4\0\14\34\1\u01a4\13\34\30\0\1\34"+
    "\7\0\17\34\1\u01a5\4\0\30\34\30\0\1\34\7\0"+
    "\20\34\4\0\4\34\1\u01a6\23\34\30\0\1\34\7\0"+
    "\2\34\1\u01a7\15\34\4\0\30\34\30\0\1\34\7\0"+
    "\20\34\4\0\4\34\1\u01a8\23\34\4\0\7\226\1\u01a9"+
    "\104\226\13\230\1\u01aa\100\230\24\0\1\34\7\0\20\34"+
    "\4\0\4\34\1\u01ab\23\34\30\0\1\34\7\0\20\34"+
    "\4\0\1\u01ac\27\34\30\0\1\34\7\0\20\34\4\0"+
    "\21\34\1\u01ad\6\34\30\0\1\34\7\0\20\34\4\0"+
    "\24\34\1\u01ae\3\34\30\0\1\34\7\0\20\34\4\0"+
    "\1\u01af\27\34\30\0\1\34\7\0\20\34\4\0\7\34"+
    "\1\u01b0\20\34\30\0\1\34\7\0\20\34\4\0\10\34"+
    "\1\u01b1\17\34\30\0\1\34\7\0\20\34\4\0\4\34"+
    "\1\u01b2\23\34\30\0\1\34\7\0\20\34\4\0\15\34"+
    "\1\u01b3\12\34\30\0\1\34\7\0\20\34\4\0\4\34"+
    "\1\u01b4\23\34\30\0\1\34\7\0\20\34\4\0\23\34"+
    "\1\u01b5\4\34\30\0\1\34\7\0\20\34\4\0\14\34"+
    "\1\u01b6\13\34\30\0\1\34\7\0\20\34\4\0\12\34"+
    "\1\u01b7\15\34\30\0\1\34\7\0\20\34\4\0\4\34"+
    "\1\u01b8\23\34\30\0\1\34\7\0\20\34\4\0\20\34"+
    "\1\u01b9\7\34\30\0\1\34\7\0\20\34\4\0\15\34"+
    "\1\u01ba\12\34\30\0\1\34\7\0\20\34\4\0\21\34"+
    "\1\u01bb\6\34\30\0\1\34\7\0\20\34\4\0\21\34"+
    "\1\u01bc\6\34\30\0\1\34\7\0\20\34\4\0\3\34"+
    "\1\u01bd\24\34\30\0\1\34\7\0\20\34\4\0\20\34"+
    "\1\u01be\7\34\30\0\1\34\7\0\20\34\4\0\26\34"+
    "\1\u01bf\1\34\30\0\1\34\7\0\20\34\4\0\12\34"+
    "\1\u01c0\15\34\30\0\1\34\7\0\20\34\4\0\13\34"+
    "\1\u01c1\14\34\30\0\1\34\7\0\20\34\4\0\22\34"+
    "\1\u01c2\5\34\30\0\1\34\7\0\20\34\4\0\14\34"+
    "\1\u01c3\13\34\30\0\1\34\7\0\20\34\4\0\5\34"+
    "\1\u01c4\22\34\30\0\1\34\7\0\20\34\4\0\14\34"+
    "\1\u01c5\13\34\30\0\1\34\7\0\20\34\4\0\20\34"+
    "\1\u01c6\7\34\30\0\1\34\7\0\20\34\4\0\26\34"+
    "\1\u01c7\1\34\30\0\1\34\7\0\20\34\4\0\14\34"+
    "\1\u01c8\13\34\30\0\1\34\7\0\20\34\4\0\6\34"+
    "\1\u01c9\21\34\30\0\1\34\7\0\20\34\4\0\12\34"+
    "\1\u01ca\15\34\30\0\1\34\7\0\20\34\4\0\4\34"+
    "\1\u01cb\23\34\30\0\1\34\7\0\20\34\4\0\15\34"+
    "\1\u01cc\12\34\30\0\1\34\7\0\20\34\4\0\10\34"+
    "\1\u01cd\17\34\30\0\1\34\7\0\2\34\1\u01ce\15\34"+
    "\4\0\30\34\30\0\1\34\7\0\20\34\4\0\21\34"+
    "\1\u01cf\6\34\30\0\1\34\7\0\20\34\4\0\22\34"+
    "\1\u01d0\5\34\30\0\1\34\7\0\20\34\4\0\2\34"+
    "\1\u01d1\25\34\30\0\1\34\7\0\20\34\4\0\2\34"+
    "\1\u01d2\16\34\1\u01d3\6\34\30\0\1\34\7\0\20\34"+
    "\4\0\10\34\1\u01d4\17\34\30\0\1\34\7\0\20\34"+
    "\4\0\21\34\1\u01d5\6\34\30\0\1\34\7\0\20\34"+
    "\4\0\14\34\1\u01d6\13\34\30\0\1\34\7\0\20\34"+
    "\4\0\22\34\1\u01d7\5\34\30\0\1\34\7\0\20\34"+
    "\4\0\22\34\1\u01d8\5\34\30\0\1\34\7\0\20\34"+
    "\4\0\4\34\1\u01d9\23\34\30\0\1\34\7\0\20\34"+
    "\4\0\21\34\1\u01da\6\34\30\0\1\34\7\0\20\34"+
    "\4\0\2\34\1\u01db\25\34\30\0\1\34\7\0\20\34"+
    "\4\0\6\34\1\u01dc\21\34\30\0\1\34\7\0\20\34"+
    "\4\0\21\34\1\u01dd\6\34\30\0\1\34\7\0\20\34"+
    "\4\0\7\34\1\u01de\20\34\30\0\1\34\7\0\20\34"+
    "\4\0\23\34\1\u01df\4\34\30\0\1\34\7\0\20\34"+
    "\4\0\4\34\1\u01e0\23\34\30\0\1\34\7\0\20\34"+
    "\4\0\1\34\1\u01e1\17\34\1\u01e2\6\34\30\0\1\34"+
    "\7\0\20\34\4\0\2\34\1\u01e3\25\34\30\0\1\34"+
    "\7\0\20\34\4\0\4\34\1\u01e4\23\34\30\0\1\34"+
    "\7\0\20\34\4\0\1\u01e5\27\34\30\0\1\34\7\0"+
    "\20\34\4\0\14\34\1\u01e6\13\34\30\0\1\34\7\0"+
    "\20\34\4\0\20\34\1\u01e7\7\34\30\0\1\34\7\0"+
    "\5\34\1\u01e8\12\34\4\0\30\34\30\0\1\34\7\0"+
    "\20\34\4\0\3\34\1\u01e9\24\34\30\0\1\34\7\0"+
    "\20\34\4\0\2\34\1\u01ea\25\34\30\0\1\34\7\0"+
    "\20\34\4\0\4\34\1\u01eb\23\34\30\0\1\34\7\0"+
    "\20\34\4\0\14\34\1\u01ec\13\34\30\0\1\34\7\0"+
    "\20\34\4\0\14\34\1\u01ed\13\34\30\0\1\34\7\0"+
    "\14\34\1\u01ee\3\34\4\0\3\34\1\u01ef\6\34\1\u01f0"+
    "\6\34\1\u01f1\6\34\30\0\1\34\7\0\20\34\4\0"+
    "\23\34\1\u01f2\4\34\30\0\1\34\7\0\20\34\4\0"+
    "\16\34\1\u01f3\11\34\30\0\1\34\7\0\20\34\4\0"+
    "\23\34\1\u01f4\4\34\30\0\1\34\7\0\20\34\4\0"+
    "\22\34\1\u01f5\5\34\30\0\1\34\7\0\3\34\1\u01f6"+
    "\14\34\4\0\30\34\30\0\1\34\7\0\20\34\4\0"+
    "\5\34\1\u01f7\22\34\30\0\1\34\7\0\20\34\4\0"+
    "\14\34\1\u01f8\13\34\30\0\1\34\7\0\20\34\4\0"+
    "\21\34\1\u01f9\6\34\30\0\1\34\7\0\20\34\4\0"+
    "\21\34\1\u01fa\6\34\30\0\1\34\7\0\20\34\4\0"+
    "\4\34\1\u01fb\23\34\30\0\1\34\7\0\20\34\4\0"+
    "\10\34\1\u01fc\17\34\30\0\1\34\7\0\20\34\4\0"+
    "\27\34\1\u01fd\30\0\1\34\7\0\20\34\4\0\4\34"+
    "\1\u01fe\23\34\30\0\1\34\7\0\20\34\4\0\2\34"+
    "\1\u01ff\25\34\30\0\1\34\7\0\20\34\4\0\1\u0200"+
    "\27\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u0201"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\27\34\1\u0202"+
    "\30\0\1\34\7\0\20\34\4\0\21\34\1\u0203\6\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u0204\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u0205\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\22\34\1\u0206\5\34"+
    "\30\0\1\34\7\0\20\34\4\0\20\34\1\u0207\7\34"+
    "\30\0\1\34\7\0\20\34\4\0\14\34\1\u0208\13\34"+
    "\30\0\1\34\7\0\11\34\1\u0209\6\34\4\0\30\34"+
    "\30\0\1\34\7\0\20\34\4\0\7\34\1\u020a\20\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u020b\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\22\34\1\u020c\5\34"+
    "\30\0\1\34\7\0\20\34\4\0\7\34\1\u020d\20\34"+
    "\30\0\1\34\7\0\20\34\4\0\12\34\1\u020e\15\34"+
    "\30\0\1\34\7\0\20\34\4\0\21\34\1\u020f\6\34"+
    "\30\0\1\34\7\0\5\34\1\u0210\10\34\1\u0211\1\34"+
    "\4\0\30\34\30\0\1\34\7\0\20\34\4\0\20\34"+
    "\1\u0212\7\34\30\0\1\34\7\0\20\34\4\0\21\34"+
    "\1\u0213\6\34\30\0\1\34\7\0\20\34\4\0\22\34"+
    "\1\u0214\5\34\30\0\1\34\7\0\20\34\4\0\20\34"+
    "\1\u0215\7\34\30\0\1\34\7\0\20\34\4\0\12\34"+
    "\1\u0216\15\34\30\0\1\34\7\0\20\34\4\0\7\34"+
    "\1\u0217\20\34\30\0\1\34\7\0\20\34\4\0\4\34"+
    "\1\u0218\23\34\30\0\1\34\7\0\20\34\4\0\1\u0219"+
    "\27\34\30\0\1\34\7\0\20\34\4\0\13\34\1\u021a"+
    "\14\34\30\0\1\34\7\0\20\34\4\0\22\34\1\u021b"+
    "\5\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u021c"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\10\34\1\u021d"+
    "\17\34\30\0\1\34\7\0\20\34\4\0\22\34\1\u021e"+
    "\5\34\30\0\1\34\7\0\1\u021f\17\34\4\0\30\34"+
    "\30\0\1\34\7\0\13\34\1\u0220\4\34\4\0\30\34"+
    "\30\0\1\34\7\0\20\34\4\0\6\34\1\u0221\21\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u0222\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\15\34\1\u0223\12\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u0224\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\22\34\1\u0225\5\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u0226\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\10\34\1\u0227\17\34"+
    "\30\0\1\34\7\0\20\34\4\0\10\34\1\u0228\17\34"+
    "\30\0\1\34\7\0\20\34\4\0\13\34\1\u0229\14\34"+
    "\30\0\1\34\7\0\20\34\4\0\10\34\1\u022a\17\34"+
    "\30\0\1\34\7\0\20\34\4\0\21\34\1\u022b\6\34"+
    "\30\0\1\34\7\0\20\34\4\0\14\34\1\u022c\13\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u022d\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\2\34\1\u022e\25\34"+
    "\30\0\1\34\7\0\20\34\4\0\22\34\1\u022f\5\34"+
    "\30\0\1\34\7\0\20\34\4\0\12\34\1\u0230\15\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u0231\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\3\34\1\u0232\24\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u0233\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u0234\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u0235\23\34"+
    "\30\0\1\34\7\0\6\34\1\u0236\7\34\1\u0237\1\34"+
    "\4\0\30\34\30\0\1\34\7\0\20\34\4\0\4\34"+
    "\1\u0238\23\34\30\0\1\34\7\0\20\34\4\0\10\34"+
    "\1\u0239\17\34\30\0\1\34\7\0\20\34\4\0\10\34"+
    "\1\u023a\17\34\30\0\1\34\7\0\20\34\4\0\4\34"+
    "\1\u023b\23\34\30\0\1\34\7\0\13\34\1\u023c\4\34"+
    "\4\0\30\34\30\0\1\34\7\0\20\34\4\0\21\34"+
    "\1\u023d\6\34\30\0\1\34\7\0\20\34\4\0\4\34"+
    "\1\u023e\23\34\30\0\1\34\7\0\20\34\4\0\21\34"+
    "\1\u023f\6\34\30\0\1\34\7\0\20\34\4\0\13\34"+
    "\1\u0240\14\34\30\0\1\34\7\0\20\34\4\0\4\34"+
    "\1\u0241\23\34\30\0\1\34\7\0\20\34\4\0\10\34"+
    "\1\u0242\17\34\30\0\1\34\7\0\20\34\4\0\3\34"+
    "\1\u0243\24\34\30\0\1\34\7\0\20\34\4\0\12\34"+
    "\1\u0244\15\34\30\0\1\34\7\0\20\34\4\0\20\34"+
    "\1\u0245\7\34\30\0\1\34\7\0\20\34\4\0\1\u0246"+
    "\27\34\30\0\1\34\7\0\16\34\1\u0247\1\34\4\0"+
    "\30\34\30\0\1\34\7\0\20\34\4\0\17\34\1\u0248"+
    "\10\34\30\0\1\34\7\0\20\34\4\0\6\34\1\u0249"+
    "\21\34\30\0\1\34\7\0\20\34\4\0\22\34\1\u024a"+
    "\5\34\30\0\1\34\7\0\20\34\4\0\20\34\1\u024b"+
    "\7\34\30\0\1\34\7\0\20\34\4\0\12\34\1\u024c"+
    "\15\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u024d"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\15\34\1\u024e"+
    "\12\34\30\0\1\34\7\0\20\34\4\0\22\34\1\u024f"+
    "\5\34\30\0\1\34\7\0\20\34\4\0\22\34\1\u0250"+
    "\5\34\30\0\1\34\7\0\20\34\4\0\15\34\1\u0251"+
    "\12\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u0252"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u0253"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\20\34\1\u0254"+
    "\7\34\30\0\1\34\7\0\20\34\4\0\12\34\1\u0255"+
    "\15\34\30\0\1\34\7\0\20\34\4\0\3\34\1\u0256"+
    "\24\34\30\0\1\34\7\0\16\34\1\u0257\1\34\4\0"+
    "\30\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u0258"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\15\34\1\u0259"+
    "\12\34\30\0\1\34\7\0\20\34\4\0\12\34\1\u025a"+
    "\15\34\30\0\1\34\7\0\20\34\4\0\26\34\1\u025b"+
    "\1\34\30\0\1\34\7\0\20\34\4\0\20\34\1\u025c"+
    "\7\34\30\0\1\34\7\0\20\34\4\0\21\34\1\u025d"+
    "\6\34\30\0\1\34\7\0\13\34\1\u025e\4\34\4\0"+
    "\30\34\30\0\1\34\7\0\20\34\4\0\12\34\1\u025f"+
    "\15\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u0260"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\4\34\1\u0261"+
    "\23\34\30\0\1\34\7\0\20\34\4\0\22\34\1\u0262"+
    "\5\34\30\0\1\34\7\0\20\34\4\0\20\34\1\u0263"+
    "\7\34\30\0\1\34\7\0\20\34\4\0\1\u0264\27\34"+
    "\30\0\1\34\7\0\20\34\4\0\23\34\1\u0265\4\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u0266\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\14\34\1\u0267\13\34"+
    "\30\0\1\34\7\0\20\34\4\0\14\34\1\u0268\13\34"+
    "\30\0\1\34\7\0\20\34\4\0\21\34\1\u0269\6\34"+
    "\30\0\1\34\7\0\20\34\4\0\21\34\1\u026a\6\34"+
    "\30\0\1\34\7\0\20\34\4\0\5\34\1\u026b\22\34"+
    "\30\0\1\34\7\0\20\34\4\0\21\34\1\u026c\6\34"+
    "\30\0\1\34\7\0\20\34\4\0\21\34\1\u026d\6\34"+
    "\30\0\1\34\7\0\20\34\4\0\12\34\1\u026e\15\34"+
    "\30\0\1\34\7\0\11\34\1\u026f\6\34\4\0\30\34"+
    "\30\0\1\34\7\0\20\34\4\0\21\34\1\u0270\6\34"+
    "\30\0\1\34\7\0\20\34\4\0\14\34\1\u0271\13\34"+
    "\30\0\1\34\7\0\20\34\4\0\4\34\1\u0272\23\34"+
    "\30\0\1\34\7\0\20\34\4\0\22\34\1\u0273\5\34"+
    "\30\0\1\34\7\0\20\34\4\0\10\34\1\u0274\17\34"+
    "\30\0\1\34\7\0\20\34\4\0\5\34\1\u0275\22\34"+
    "\30\0\1\34\7\0\20\34\4\0\1\u0276\27\34\30\0"+
    "\1\34\7\0\20\34\4\0\14\34\1\u0277\13\34\30\0"+
    "\1\34\7\0\20\34\4\0\10\34\1\u0278\17\34\30\0"+
    "\1\34\7\0\20\34\4\0\1\u0279\27\34\30\0\1\34"+
    "\7\0\20\34\4\0\6\34\1\u027a\21\34\30\0\1\34"+
    "\7\0\20\34\4\0\4\34\1\u027b\23\34\30\0\1\34"+
    "\7\0\20\34\4\0\22\34\1\u027c\5\34\30\0\1\34"+
    "\7\0\10\34\1\u027d\7\34\4\0\30\34\30\0\1\34"+
    "\7\0\20\34\4\0\22\34\1\u027e\5\34\30\0\1\34"+
    "\7\0\20\34\4\0\24\34\1\u027f\3\34\30\0\1\34"+
    "\7\0\20\34\4\0\23\34\1\u0280\4\34\30\0\1\34"+
    "\7\0\20\34\4\0\21\34\1\u0281\6\34\30\0\1\34"+
    "\7\0\20\34\4\0\22\34\1\u0282\5\34\30\0\1\34"+
    "\7\0\20\34\4\0\5\34\1\u0283\22\34\30\0\1\34"+
    "\7\0\20\34\4\0\13\34\1\u0284\14\34\30\0\1\34"+
    "\7\0\20\34\4\0\21\34\1\u0285\6\34\30\0\1\34"+
    "\7\0\14\34\1\u0286\3\34\4\0\30\34\30\0\1\34"+
    "\7\0\20\34\4\0\1\u0287\27\34\30\0\1\34\7\0"+
    "\20\34\4\0\12\34\1\u0288\15\34\30\0\1\34\7\0"+
    "\20\34\4\0\21\34\1\u0289\6\34\30\0\1\34\7\0"+
    "\20\34\4\0\10\34\1\u028a\17\34\30\0\1\34\7\0"+
    "\20\34\4\0\1\u028b\27\34\30\0\1\34\7\0\20\34"+
    "\4\0\22\34\1\u028c\5\34\30\0\1\34\7\0\20\34"+
    "\4\0\4\34\1\u028d\23\34\30\0\1\34\7\0\20\34"+
    "\4\0\22\34\1\u028e\5\34\30\0\1\34\7\0\20\34"+
    "\4\0\25\34\1\u028f\2\34\30\0\1\34\7\0\20\34"+
    "\4\0\1\u0290\27\34\30\0\1\34\7\0\20\34\4\0"+
    "\2\34\1\u0291\25\34\30\0\1\34\7\0\20\34\4\0"+
    "\21\34\1\u0292\6\34\30\0\1\34\7\0\20\34\4\0"+
    "\4\34\1\u0293\23\34\30\0\1\34\7\0\20\34\4\0"+
    "\15\34\1\u0294\12\34\30\0\1\34\7\0\20\34\4\0"+
    "\12\34\1\u0295\15\34\30\0\1\34\7\0\20\34\4\0"+
    "\22\34\1\u0296\5\34\30\0\1\34\7\0\20\34\4\0"+
    "\23\34\1\u0297\4\34\30\0\1\34\7\0\7\34\1\u0298"+
    "\10\34\4\0\30\34\30\0\1\34\7\0\20\34\4\0"+
    "\20\34\1\u0299\7\34\30\0\1\34\7\0\20\34\4\0"+
    "\21\34\1\u029a\6\34\30\0\1\34\7\0\20\34\4\0"+
    "\21\34\1\u029b\6\34\30\0\1\34\7\0\20\34\4\0"+
    "\12\34\1\u029c\15\34\30\0\1\34\7\0\20\34\4\0"+
    "\4\34\1\u029d\23\34\30\0\1\34\7\0\20\34\4\0"+
    "\3\34\1\u029e\24\34\30\0\1\34\7\0\20\34\4\0"+
    "\22\34\1\u029f\5\34\30\0\1\34\7\0\20\34\4\0"+
    "\27\34\1\u02a0\30\0\1\34\7\0\20\34\4\0\21\34"+
    "\1\u02a1\6\34\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[39824];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\0\2\1\1\11\3\1"+
    "\2\11\2\1\1\11\4\1\2\11\4\1\1\11\1\1"+
    "\3\11\23\1\1\11\1\1\3\11\1\0\1\1\1\0"+
    "\2\11\1\0\1\1\1\0\7\11\1\0\1\1\1\11"+
    "\1\0\1\11\2\1\2\11\1\1\2\11\101\1\2\11"+
    "\1\0\1\11\2\0\1\1\3\11\136\1\2\0\1\11"+
    "\132\1\2\0\116\1\2\11\367\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[673];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JenkinsfileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* skip unknown characters */
            }
          // fall through
          case 177: break;
          case 2:
            { /* skip whitespace */
            }
          // fall through
          case 178: break;
          case 3:
            { return NEWLINE;
            }
          // fall through
          case 179: break;
          case 4:
            { return NOT;
            }
          // fall through
          case 180: break;
          case 5:
            { return DOLLAR;
            }
          // fall through
          case 181: break;
          case 6:
            { return MOD;
            }
          // fall through
          case 182: break;
          case 7:
            { return BIT_AND;
            }
          // fall through
          case 183: break;
          case 8:
            { return LPAREN;
            }
          // fall through
          case 184: break;
          case 9:
            { return RPAREN;
            }
          // fall through
          case 185: break;
          case 10:
            { return MULT;
            }
          // fall through
          case 186: break;
          case 11:
            { return PLUS;
            }
          // fall through
          case 187: break;
          case 12:
            { return COMMA;
            }
          // fall through
          case 188: break;
          case 13:
            { return MINUS;
            }
          // fall through
          case 189: break;
          case 14:
            { return DOT;
            }
          // fall through
          case 190: break;
          case 15:
            { return DIV;
            }
          // fall through
          case 191: break;
          case 16:
            { return NUMBER;
            }
          // fall through
          case 192: break;
          case 17:
            { return COLON;
            }
          // fall through
          case 193: break;
          case 18:
            { return SEMICOLON;
            }
          // fall through
          case 194: break;
          case 19:
            { return LT;
            }
          // fall through
          case 195: break;
          case 20:
            { return ASSIGN;
            }
          // fall through
          case 196: break;
          case 21:
            { return GT;
            }
          // fall through
          case 197: break;
          case 22:
            { return QUESTION;
            }
          // fall through
          case 198: break;
          case 23:
            { return AT;
            }
          // fall through
          case 199: break;
          case 24:
            { return IDENTIFIER;
            }
          // fall through
          case 200: break;
          case 25:
            { return LBRACKET;
            }
          // fall through
          case 201: break;
          case 26:
            { return RBRACKET;
            }
          // fall through
          case 202: break;
          case 27:
            { return BIT_XOR;
            }
          // fall through
          case 203: break;
          case 28:
            { return LBRACE;
            }
          // fall through
          case 204: break;
          case 29:
            { return BIT_OR;
            }
          // fall through
          case 205: break;
          case 30:
            { return RBRACE;
            }
          // fall through
          case 206: break;
          case 31:
            { return BIT_NOT;
            }
          // fall through
          case 207: break;
          case 32:
            { return NEQ;
            }
          // fall through
          case 208: break;
          case 33:
            { return STRING_LITERAL;
            }
          // fall through
          case 209: break;
          case 34:
            { return MOD_ASSIGN;
            }
          // fall through
          case 210: break;
          case 35:
            { return AND;
            }
          // fall through
          case 211: break;
          case 36:
            { return SINGLE_QUOTED_STRING;
            }
          // fall through
          case 212: break;
          case 37:
            { return POWER;
            }
          // fall through
          case 213: break;
          case 38:
            { return SPREAD;
            }
          // fall through
          case 214: break;
          case 39:
            { return MULT_ASSIGN;
            }
          // fall through
          case 215: break;
          case 40:
            { return PLUS_ASSIGN;
            }
          // fall through
          case 216: break;
          case 41:
            { return MINUS_ASSIGN;
            }
          // fall through
          case 217: break;
          case 42:
            { return KW_ARROW;
            }
          // fall through
          case 218: break;
          case 43:
            { return RANGE;
            }
          // fall through
          case 219: break;
          case 44:
            { return LINE_COMMENT;
            }
          // fall through
          case 220: break;
          case 45:
            { return DIV_ASSIGN;
            }
          // fall through
          case 221: break;
          case 46:
            { return LSHIFT;
            }
          // fall through
          case 222: break;
          case 47:
            { return LE;
            }
          // fall through
          case 223: break;
          case 48:
            { return EQ;
            }
          // fall through
          case 224: break;
          case 49:
            { return REGEX_FIND;
            }
          // fall through
          case 225: break;
          case 50:
            { return GE;
            }
          // fall through
          case 226: break;
          case 51:
            { return RSHIFT;
            }
          // fall through
          case 227: break;
          case 52:
            { return SAFE_DOT;
            }
          // fall through
          case 228: break;
          case 53:
            { return ELVIS;
            }
          // fall through
          case 229: break;
          case 54:
            { return KW_IF;
            }
          // fall through
          case 230: break;
          case 55:
            { return KW_IN;
            }
          // fall through
          case 231: break;
          case 56:
            { return KW_SH;
            }
          // fall through
          case 232: break;
          case 57:
            { return OR;
            }
          // fall through
          case 233: break;
          case 58:
            { return SPACESHIP;
            }
          // fall through
          case 234: break;
          case 59:
            { return REGEX_MATCH;
            }
          // fall through
          case 235: break;
          case 60:
            { return URSHIFT;
            }
          // fall through
          case 236: break;
          case 61:
            { return KW_ANY;
            }
          // fall through
          case 237: break;
          case 62:
            { return KW_BAT;
            }
          // fall through
          case 238: break;
          case 63:
            { return KW_DEF;
            }
          // fall through
          case 239: break;
          case 64:
            { return KW_DIR;
            }
          // fall through
          case 240: break;
          case 65:
            { return KW_FOR;
            }
          // fall through
          case 241: break;
          case 66:
            { return KW_GIT;
            }
          // fall through
          case 242: break;
          case 67:
            { return KW_NEW;
            }
          // fall through
          case 243: break;
          case 68:
            { return KW_NOT;
            }
          // fall through
          case 244: break;
          case 69:
            { return KW_SCM;
            }
          // fall through
          case 245: break;
          case 70:
            { return KW_TAG;
            }
          // fall through
          case 246: break;
          case 71:
            { return KW_TRY;
            }
          // fall through
          case 247: break;
          case 72:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 248: break;
          case 73:
            { return KW_CASE;
            }
          // fall through
          case 249: break;
          case 74:
            { return KW_CRON;
            }
          // fall through
          case 250: break;
          case 75:
            { return KW_ECHO;
            }
          // fall through
          case 251: break;
          case 76:
            { return KW_ELSE;
            }
          // fall through
          case 252: break;
          case 77:
            { return KW_NODE;
            }
          // fall through
          case 253: break;
          case 78:
            { return KW_NONE;
            }
          // fall through
          case 254: break;
          case 79:
            { return KW_NULL;
            }
          // fall through
          case 255: break;
          case 80:
            { return KW_POST;
            }
          // fall through
          case 256: break;
          case 81:
            { return KW_PWSH;
            }
          // fall through
          case 257: break;
          case 82:
            { return KW_TEXT;
            }
          // fall through
          case 258: break;
          case 83:
            { return KW_THIS;
            }
          // fall through
          case 259: break;
          case 84:
            { return KW_TRUE;
            }
          // fall through
          case 260: break;
          case 85:
            { return KW_WHEN;
            }
          // fall through
          case 261: break;
          case 86:
            { return KW_AGENT;
            }
          // fall through
          case 262: break;
          case 87:
            { return KW_ALL_OF;
            }
          // fall through
          case 263: break;
          case 88:
            { return KW_ANY_OF;
            }
          // fall through
          case 264: break;
          case 89:
            { return KW_BREAK;
            }
          // fall through
          case 265: break;
          case 90:
            { return KW_BUILD;
            }
          // fall through
          case 266: break;
          case 91:
            { return KW_CATCH;
            }
          // fall through
          case 267: break;
          case 92:
            { return KW_CLASS;
            }
          // fall through
          case 268: break;
          case 93:
            { return KW_FALSE;
            }
          // fall through
          case 269: break;
          case 94:
            { return KW_FINAL;
            }
          // fall through
          case 270: break;
          case 95:
            { return KW_FIXED;
            }
          // fall through
          case 271: break;
          case 96:
            { return KW_INPUT;
            }
          // fall through
          case 272: break;
          case 97:
            { return KW_LABEL;
            }
          // fall through
          case 273: break;
          case 98:
            { return KW_RETRY;
            }
          // fall through
          case 274: break;
          case 99:
            { return KW_SLEEP;
            }
          // fall through
          case 275: break;
          case 100:
            { return KW_STAGE;
            }
          // fall through
          case 276: break;
          case 101:
            { return KW_STASH;
            }
          // fall through
          case 277: break;
          case 102:
            { return KW_STEPS;
            }
          // fall through
          case 278: break;
          case 103:
            { return KW_SUPER;
            }
          // fall through
          case 279: break;
          case 104:
            { return KW_THROW;
            }
          // fall through
          case 280: break;
          case 105:
            { return KW_TOOLS;
            }
          // fall through
          case 281: break;
          case 106:
            { return KW_WHILE;
            }
          // fall through
          case 282: break;
          case 107:
            { return MULTILINE_STRING;
            }
          // fall through
          case 283: break;
          case 108:
            { return MULTILINE_SINGLE_STRING;
            }
          // fall through
          case 284: break;
          case 109:
            { return KW_ALWAYS;
            }
          // fall through
          case 285: break;
          case 110:
            { return KW_BRANCH;
            }
          // fall through
          case 286: break;
          case 111:
            { return KW_CHOICE;
            }
          // fall through
          case 287: break;
          case 112:
            { return KW_DOCKER;
            }
          // fall through
          case 288: break;
          case 113:
            { return KW_EQUALS;
            }
          // fall through
          case 289: break;
          case 114:
            { return KW_IMPORT;
            }
          // fall through
          case 290: break;
          case 115:
            { return KW_MATRIX;
            }
          // fall through
          case 291: break;
          case 116:
            { return KW_PUBLIC;
            }
          // fall through
          case 292: break;
          case 117:
            { return KW_RETURN;
            }
          // fall through
          case 293: break;
          case 118:
            { return KW_SCRIPT;
            }
          // fall through
          case 294: break;
          case 119:
            { return KW_STAGES;
            }
          // fall through
          case 295: break;
          case 120:
            { return KW_STATIC;
            }
          // fall through
          case 296: break;
          case 121:
            { return KW_STRING;
            }
          // fall through
          case 297: break;
          case 122:
            { return KW_SWITCH;
            }
          // fall through
          case 298: break;
          case 123:
            { return KW_ABORTED;
            }
          // fall through
          case 299: break;
          case 124:
            { return KW_CHANGED;
            }
          // fall through
          case 300: break;
          case 125:
            { return KW_CLEANUP;
            }
          // fall through
          case 301: break;
          case 126:
            { return KW_DEFAULT;
            }
          // fall through
          case 302: break;
          case 127:
            { return KW_EXTENDS;
            }
          // fall through
          case 303: break;
          case 128:
            { return KW_FAILURE;
            }
          // fall through
          case 304: break;
          case 129:
            { return KW_FINALLY;
            }
          // fall through
          case 305: break;
          case 130:
            { return KW_LIBRARY;
            }
          // fall through
          case 306: break;
          case 131:
            { return KW_OPTIONS;
            }
          // fall through
          case 307: break;
          case 132:
            { return KW_PACKAGE;
            }
          // fall through
          case 308: break;
          case 133:
            { return KW_POLL_SCM;
            }
          // fall through
          case 309: break;
          case 134:
            { return KW_PRIVATE;
            }
          // fall through
          case 310: break;
          case 135:
            { return KW_SUCCESS;
            }
          // fall through
          case 311: break;
          case 136:
            { return KW_TIMEOUT;
            }
          // fall through
          case 312: break;
          case 137:
            { return KW_UNSTASH;
            }
          // fall through
          case 313: break;
          case 138:
            { return KW_ABSTRACT;
            }
          // fall through
          case 314: break;
          case 139:
            { return KW_CHECKOUT;
            }
          // fall through
          case 315: break;
          case 140:
            { return KW_CONTINUE;
            }
          // fall through
          case 316: break;
          case 141:
            { return KW_PARALLEL;
            }
          // fall through
          case 317: break;
          case 142:
            { return KW_PASSWORD;
            }
          // fall through
          case 318: break;
          case 143:
            { return KW_PIPELINE;
            }
          // fall through
          case 319: break;
          case 144:
            { return KW_READ_FILE;
            }
          // fall through
          case 320: break;
          case 145:
            { return KW_TRIGGERS;
            }
          // fall through
          case 321: break;
          case 146:
            { return KW_UNSTABLE;
            }
          // fall through
          case 322: break;
          case 147:
            { return KW_UPSTREAM;
            }
          // fall through
          case 323: break;
          case 148:
            { return KW_CHANGELOG;
            }
          // fall through
          case 324: break;
          case 149:
            { return KW_CHANGESET;
            }
          // fall through
          case 325: break;
          case 150:
            { return KW_DELETE_DIR;
            }
          // fall through
          case 326: break;
          case 151:
            { return KW_INTERFACE;
            }
          // fall through
          case 327: break;
          case 152:
            { return KW_PROTECTED;
            }
          // fall through
          case 328: break;
          case 153:
            { return KW_WAIT_UNTIL;
            }
          // fall through
          case 329: break;
          case 154:
            { return KW_WRITE_FILE;
            }
          // fall through
          case 330: break;
          case 155:
            { return KW_DOCKERFILE;
            }
          // fall through
          case 331: break;
          case 156:
            { return KW_EXPRESSION;
            }
          // fall through
          case 332: break;
          case 157:
            { return KW_FILE_EXISTS;
            }
          // fall through
          case 333: break;
          case 158:
            { return KW_IMPLEMENTS;
            }
          // fall through
          case 334: break;
          case 159:
            { return KW_INSTANCEOF;
            }
          // fall through
          case 335: break;
          case 160:
            { return KW_KUBERNETES;
            }
          // fall through
          case 336: break;
          case 161:
            { return KW_PARAMETERS;
            }
          // fall through
          case 337: break;
          case 162:
            { return KW_POWERSHELL;
            }
          // fall through
          case 338: break;
          case 163:
            { return KW_REGRESSION;
            }
          // fall through
          case 339: break;
          case 164:
            { return KW_SECRET_FILE;
            }
          // fall through
          case 340: break;
          case 165:
            { return KW_SECRET_TEXT;
            }
          // fall through
          case 341: break;
          case 166:
            { return KW_BUILDING_TAG;
            }
          // fall through
          case 342: break;
          case 167:
            { return KW_ENVIRONMENT;
            }
          // fall through
          case 343: break;
          case 168:
            { return KW_PUBLISH_HTML;
            }
          // fall through
          case 344: break;
          case 169:
            { return KW_BOOLEAN_PARAM;
            }
          // fall through
          case 345: break;
          case 170:
            { return KW_UNSUCCESSFUL;
            }
          // fall through
          case 346: break;
          case 171:
            { return KW_CHANGE_REQUEST;
            }
          // fall through
          case 347: break;
          case 172:
            { return KW_WITH_CREDENTIALS;
            }
          // fall through
          case 348: break;
          case 173:
            { return KW_ARCHIVE_ARTIFACTS;
            }
          // fall through
          case 349: break;
          case 174:
            { return KW_USERNAME_PASSWORD;
            }
          // fall through
          case 350: break;
          case 175:
            { return KW_SSH_USER_PRIVATE_KEY;
            }
          // fall through
          case 351: break;
          case 176:
            { return KW_PUBLISH_TEST_RESULTS;
            }
          // fall through
          case 352: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
